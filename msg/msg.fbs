namespace fly;

union Any {
  TimerStart,
  TimerReady,
  TimerClear,
  HttpRequest,
}

enum ErrorKind: byte {
  NoError = 0,

  // io errors

  NotFound,
  PermissionDenied,
  ConnectionRefused,
  ConnectionReset,
  ConnectionAborted,
  NotConnected,
  AddrInUse,
  AddrNotAvailable,
  BrokenPipe,
  AlreadyExists,
  WouldBlock,
  InvalidInput,
  InvalidData,
  TimedOut,
  Interrupted,
  WriteZero,
  Other,
  UnexpectedEof,

  // url errors

  EmptyHost,
  IdnaError,
  InvalidPort,
  InvalidIpv4Address,
  InvalidIpv6Address,
  InvalidDomainCharacter,
  RelativeUrlWithoutBase,
  RelativeUrlWithCannotBeABaseBase,
  SetHostOnCannotBeABaseUrl,
  Overflow,

  // hyper errors

  HttpUser,
  HttpClosed,
  HttpCanceled,
  HttpParse,
  HttpOther,
}

table Base {
  cmd_id: uint32;
  error_kind: ErrorKind = NoError;
  error: string;
  msg: Any;
}
table TimerStart {
  id: uint;
  interval: bool;
  delay: uint;
}

table TimerReady {
  id: uint;
  done: bool;
}

table TimerClear {
  id: uint;
}

enum HttpMethod : byte { Get, Head, Post, Put, Patch, Delete, Connect, Options, Trace }

table HeaderPair {
  key: string;
  value: string;
}

table HttpRequest {
  id: uint;
  url: string;
  method: HttpMethod;
  headers: [HeaderPair];
}

root_type Base;
